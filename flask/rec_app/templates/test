keyword = "mich"
      {% if artist_names.startswith(keyword):
      try:
        return float(artist_names.split(',')[1])
      except ValueError:
      # treat the error
      %}

       {% if for a in artist_names %}
      <br>
      <li value ={{ a }}>{{ a }}</li>
      {% endfor %}

      def result():
    ## liste retourn√©e par page index
    user_artist_list = request.form.getlist("search")

    ## Pivot Matrix rating    
    ratings_df = get_ratings_df(ap)

    ## compute the new ratings_df matrix with the new user
    ratings_df, user = add_new_user(ratings_df, user_artist_list, artist_names, ap)
    ## update the new user list                            
    user_ids = ratings_df.index.values 
    ## compute matrix X
    X = get_X(ratings_df) 

    ## compute model
    model = fit_model(X)

    ## Make predictions
    top_items_pred = get_recommandation(user, model, user_ids, ap, n_reco=10)
    reco = [item for item in top_items_pred if item not in user_artist_list]

    return render_template('result.html', selection = user_artist_list, recommandations = reco[:20])